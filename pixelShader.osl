#include "mx_funcs.h"

#define true 1
#define false 0
struct textureresource { string filename; string colorspace; };
struct BSDF { closure color response; color throughput; float thickness; float ior; };
#define EDF closure color
#define VDF closure color
#define surfaceshader closure color
#define volumeshader closure color
#define displacementshader vector
#define lightshader closure color

#define M_FLOAT_EPS 1e-8

void mx_roughness_anisotropy(float roughness, float anisotropy, output vector2 result)
{
    float roughness_sqr = clamp(roughness*roughness, M_FLOAT_EPS, 1.0);
    if (anisotropy > 0.0)
    {
        float aspect = sqrt(1.0 - clamp(anisotropy, 0.0, 0.98));
        result.x = min(roughness_sqr / aspect, 1.0);
        result.y = roughness_sqr * aspect;
    }
    else
    {
        result.x = roughness_sqr;
        result.y = roughness_sqr;
    }
}

float mx_square(float x)
{
    return x*x;
}

vector2 mx_square(vector2 x)
{
    return x*x;
}

vector mx_square(vector x)
{
    return x*x;
}

vector4 mx_square(vector4 x)
{
    return x*x;
}

float mx_pow5(float x)
{
    return mx_square(mx_square(x)) * x;
}

color mx_fresnel_conductor(float cosTheta, vector n, vector k)
{
   float c2 = cosTheta*cosTheta;
   vector n2_k2 = n*n + k*k;
   vector nc2 = 2.0 * n * cosTheta;

   vector rs_a = n2_k2 + c2;
   vector rp_a = n2_k2 * c2 + 1.0;
   vector rs = (rs_a - nc2) / (rs_a + nc2);
   vector rp = (rp_a - nc2) / (rp_a + nc2);

   return 0.5 * (rs + rp);
}

// Standard Schlick Fresnel
float mx_fresnel_schlick(float cosTheta, float F0)
{
    float x = clamp(1.0 - cosTheta, 0.0, 1.0);
    float x5 = mx_pow5(x);
    return F0 + (1.0 - F0) * x5;
}
color mx_fresnel_schlick(float cosTheta, color F0)
{
    float x = clamp(1.0 - cosTheta, 0.0, 1.0);
    float x5 = mx_pow5(x);
    return F0 + (1.0 - F0) * x5;
}

// Generalized Schlick Fresnel
float mx_fresnel_schlick(float cosTheta, float F0, float F90)
{
    float x = clamp(1.0 - cosTheta, 0.0, 1.0);
    float x5 = mx_pow5(x);
    return mix(F0, F90, x5);
}
color mx_fresnel_schlick(float cosTheta, color F0, color F90)
{
    float x = clamp(1.0 - cosTheta, 0.0, 1.0);
    float x5 = mx_pow5(x);
    return mix(F0, F90, x5);
}

// Generalized Schlick Fresnel with a variable exponent
color mx_fresnel_schlick(float cosTheta, float f0, float f90, float exponent)
{
    float x = clamp(1.0 - cosTheta, 0.0, 1.0);
    return mix(f0, f90, pow(x, exponent));
}
color mx_fresnel_schlick(float cosTheta, color f0, color f90, float exponent)
{
    float x = clamp(1.0 - cosTheta, 0.0, 1.0);
    return mix(f0, f90, pow(x, exponent));
}

// Rational curve fit approximation for the directional albedo of Imageworks sheen.
float mx_imageworks_sheen_dir_albedo_analytic(float NdotV, float roughness)
{
    float a = 5.25248 - 7.66024 * NdotV + 14.26377 * roughness;
    float b = 1.0 + 30.66449 * NdotV + 32.53420 * roughness;
    return a / b;
}

float mx_imageworks_sheen_dir_albedo(float NdotV, float roughness)
{
    float dirAlbedo = mx_imageworks_sheen_dir_albedo_analytic(NdotV, roughness);
    return clamp(dirAlbedo, 0.0, 1.0);
}

// TODO: Vanilla OSL doesn't have a proper sheen closure,
// so use 'diffuse' scaled by sheen directional albedo for now.
void mx_sheen_bsdf(float weight, color Ks, float roughness, vector N, output BSDF bsdf)
{
    if (weight < M_FLOAT_EPS)
    {
        bsdf.response = 0;
        bsdf.throughput = color(1.0);
        return;
    }

    // TODO: Normalization should not be needed. My suspicion is that
    // BSDF sampling of new outgoing direction in 'testrender' needs
    // to be fixed.
    vector V = normalize(-I);

    float NdotV = fabs(dot(N,V));
    float alpha = clamp(roughness, M_FLOAT_EPS, 1.0);
    float albedo = weight * mx_imageworks_sheen_dir_albedo(NdotV, alpha);
    bsdf.response = albedo * Ks * diffuse(N);
    bsdf.throughput = 1.0 - albedo;
}

void mx_luminance_color3(color in, color lumacoeffs, output color result)
{
    result = dot(in, lumacoeffs);
}

matrix rotationMatrix(vector axis, float angle)
{
    vector nAxis = normalize(axis);
    float s = sin(angle);
    float c = cos(angle);
    float oc = 1.0 - c;

    return matrix(oc * nAxis[0] * nAxis[0] + c,             oc * nAxis[0] * nAxis[1] - nAxis[2] * s,  oc * nAxis[2] * nAxis[0] + nAxis[1] * s,  0.0,
                  oc * nAxis[0] * nAxis[1] + nAxis[2] * s,  oc * nAxis[1] * nAxis[1] + c,             oc * nAxis[1] * nAxis[2] - nAxis[0] * s,  0.0,
                  oc * nAxis[2] * nAxis[0] - nAxis[1] * s,  oc * nAxis[1] * nAxis[2] + nAxis[0] * s,  oc * nAxis[2] * nAxis[2] + c,             0.0,
                  0.0,                                      0.0,                                      0.0,                                      1.0);
}

void mx_rotate_vector3(vector _in, float amount, vector axis, output vector result)
{
    float rotationRadians = radians(amount);
    matrix m = rotationMatrix(axis, rotationRadians);
    vector4 trans = transform(m, vector4(_in[0], _in[1], _in[2], 1.0));
    result = vector(trans.x, trans.y, trans.z);
}

void mx_artistic_ior(color reflectivity, color edge_color, output vector ior, output vector extinction)
{
    // "Artist Friendly Metallic Fresnel", Ole Gulbrandsen, 2014
    // http://jcgt.org/published/0003/04/03/paper.pdf

    color r = clamp(reflectivity, 0.0, 0.99);
    color r_sqrt = sqrt(r);
    color n_min = (1.0 - r) / (1.0 + r);
    color n_max = (1.0 + r_sqrt) / (1.0 - r_sqrt);
    ior = mix(n_max, n_min, edge_color);

    color np1 = ior + 1.0;
    color nm1 = ior - 1.0;
    color k2 = (np1*np1 * r - nm1*nm1) / (1.0 - r);
    k2 = max(k2, 0.0);
    extinction = sqrt(k2);
}


// Compute the average of an anisotropic alpha pair.
float mx_average_alpha(vector2 alpha)
{
    return sqrt(alpha.x * alpha.y);
}

// Convert a real-valued index of refraction to normal-incidence reflectivity.
float mx_ior_to_f0(float ior)
{
    return mx_square((ior - 1.0) / (ior + 1.0));
}

// Rational quadratic fit to Monte Carlo data for GGX directional albedo.
color mx_ggx_dir_albedo(float NdotV, float alpha, color F0, color F90)
{
    float x = NdotV;
    float y = alpha;
    float x2 = mx_square(x);
    float y2 = mx_square(y);
    vector4 r = vector4(0.1003, 0.9345, 1.0, 1.0) +
                vector4(-0.6303, -2.323, -1.765, 0.2281) * x +
                vector4(9.748, 2.229, 8.263, 15.94) * y +
                vector4(-2.038, -3.748, 11.53, -55.83) * x * y +
                vector4(29.34, 1.424, 28.96, 13.08) * x2 +
                vector4(-8.245, -0.7684, -7.507, 41.26) * y2 +
                vector4(-26.44, 1.436, -36.11, 54.9) * x2 * y +
                vector4(19.99, 0.2913, 15.86, 300.2) * x * y2 +
                vector4(-5.448, 0.6286, 33.37, -285.1) * x2 * y2;
    vector2 AB = vector2(r.x, r.y) / vector2(r.z, r.w);
    AB.x = clamp(AB.x, 0.0, 1.0);
    AB.y = clamp(AB.y, 0.0, 1.0);
    return F0 * AB.x + F90 * AB.y;
}

float mx_ggx_dir_albedo(float NdotV, float alpha, float F0, float F90)
{
    color result = mx_ggx_dir_albedo(NdotV, alpha, color(F0), color(F90));
    return result[0];
}

float mx_ggx_dir_albedo(float NdotV, float alpha, float ior)
{
    color result = mx_ggx_dir_albedo(NdotV, alpha, color(mx_ior_to_f0(ior)), color(1.0));
    return result[0];
}

// https://blog.selfshadow.com/publications/turquin/ms_comp_final.pdf
// Equations 14 and 16
color mx_ggx_energy_compensation(float NdotV, float alpha, color Fss)
{
    float Ess = mx_ggx_dir_albedo(NdotV, alpha, 1.0, 1.0);
    return 1.0 + Fss * (1.0 - Ess) / Ess;
}

float mx_ggx_energy_compensation(float NdotV, float alpha, float Fss)
{
    color result = mx_ggx_energy_compensation(NdotV, alpha, color(Fss));
    return result[0];
}

void mx_dielectric_bsdf(float weight, color tint, float ior, vector2 roughness, normal N, vector U, string distribution, string scatter_mode, output BSDF bsdf)
{
    if (scatter_mode == "T")
    {
        bsdf.response = tint * weight * microfacet(distribution, N, U, roughness.x, roughness.y, ior, 1);
        bsdf.throughput = tint * weight;
        return;
    }

    float NdotV = clamp(dot(N,-I), M_FLOAT_EPS, 1.0);
    float F0 = mx_ior_to_f0(ior);
    float F = mx_fresnel_schlick(NdotV, F0);

    // Calculate compensation for multiple scattering.
    // This should normally be done inside the closure
    // but since vanilla OSL doesen't support this we
    // add it here in shader code instead.
    vector2 safeAlpha = clamp(roughness, M_FLOAT_EPS, 1.0);
    float avgAlpha = mx_average_alpha(safeAlpha);
    float comp = mx_ggx_energy_compensation(NdotV, avgAlpha, F);

    if (scatter_mode == "R")
    {
        bsdf.response = tint * weight * comp * microfacet(distribution, N, U, safeAlpha.x, safeAlpha.y, ior, 0);

        // Calculate throughput from directional albedo.
        float dirAlbedo = mx_ggx_dir_albedo(NdotV, avgAlpha, ior) * comp;
        bsdf.throughput = 1.0 - dirAlbedo * weight;
    }
    else
    {
        bsdf.response = tint * weight * comp * microfacet(distribution, N, U, safeAlpha.x, safeAlpha.y, ior, 2);
        bsdf.throughput = color(1.0);
    }
}


void mx_conductor_bsdf(float weight, color ior_n, color ior_k, vector2 roughness, normal N, vector U, string distribution, output BSDF bsdf)
{
    bsdf.throughput = color(0.0);

    if (weight < M_FLOAT_EPS)
    {
        bsdf.response = 0;
        return;
    }

    // Calculate conductor fresnel
    //
    // Fresnel should be based on microfacet normal
    // but we have no access to that from here, so just use
    // view direction and surface normal instead
    //
    float NdotV = fabs(dot(N,-I));
    color F = mx_fresnel_conductor(NdotV, ior_n, ior_k);

    // Calculate compensation for multiple scattering.
    // This should normally be done inside the closure
    // but since vanilla OSL doesen't support this we
    // add it here in shader code instead.
    vector2 safeAlpha = clamp(roughness, M_FLOAT_EPS, 1.0);
    float avgAlpha = mx_average_alpha(safeAlpha);
    color comp = mx_ggx_energy_compensation(NdotV, avgAlpha, F);

    // Set ior to 0.0 to disable the internal dielectric fresnel
    bsdf.response = F * comp * weight * microfacet(distribution, N, U, safeAlpha.x, safeAlpha.y, 0.0, false);
}

void mx_translucent_bsdf(float weight, color _color, vector _normal, output BSDF bsdf)
{
    // TODO: Subsurface closure is not supported by vanilla OSL.
    bsdf.response = _color * weight * translucent(_normal);
    bsdf.throughput = color(0.0);
}

void mx_subsurface_bsdf(float weight, color _color, vector radius, float anisotropy, vector _normal, output BSDF bsdf)
{
    // TODO: Subsurface closure is not supported by vanilla OSL.
    bsdf.response = _color * weight * translucent(_normal);
    bsdf.throughput = color(0.0);
}

void mx_oren_nayar_diffuse_bsdf(float weight, color _color, float roughness, normal N, output BSDF bsdf)
{
    bsdf.response = _color * weight * oren_nayar(N, roughness);
    bsdf.throughput = color(0.0);
}

void mx_surface(BSDF bsdf, EDF edf, float opacity, output surfaceshader result)
{
    float opacity_weight = clamp(opacity, 0.0, 1.0);
    result = (bsdf.response + edf) * opacity_weight + transparent() * (1.0 - opacity_weight);
}

void NG_standard_surface_surfaceshader_100(float base, color base_color, float diffuse_roughness, float metalness, float specular, color specular_color, float specular_roughness, float specular_IOR, float specular_anisotropy, float specular_rotation, float transmission, color transmission_color, float transmission_depth, color transmission_scatter, float transmission_scatter_anisotropy, float transmission_dispersion, float transmission_extra_roughness, float subsurface1, color subsurface_color, color subsurface_radius, float subsurface_scale, float subsurface_anisotropy, float sheen, color sheen_color, float sheen_roughness, float coat, color coat_color, float coat_roughness, float coat_anisotropy, float coat_rotation, float coat_IOR, vector coat_normal, float coat_affect_color, float coat_affect_roughness, float thin_film_thickness, float thin_film_IOR, float emission1, color emission_color, color opacity, int thin_walled, vector normal1, vector tangent, output surfaceshader out)
{
    closure color null_closure = 0;
    vector2 coat_roughness_vector_out = vector2(0.0, 0.0);
    mx_roughness_anisotropy(coat_roughness, coat_anisotropy, coat_roughness_vector_out);
    float coat_tangent_rotate_degree_in2_tmp = 360;
    float coat_tangent_rotate_degree_out = coat_rotation * coat_tangent_rotate_degree_in2_tmp;
    color metal_reflectivity_out = base_color * base;
    color metal_edgecolor_out = specular_color * specular;
    float coat_affect_roughness_multiply1_out = coat_affect_roughness * coat;
    float tangent_rotate_degree_in2_tmp = 360;
    float tangent_rotate_degree_out = specular_rotation * tangent_rotate_degree_in2_tmp;
    float coat_clamped_low_tmp = 0;
    float coat_clamped_high_tmp = 1;
    float coat_clamped_out = clamp(coat, coat_clamped_low_tmp, coat_clamped_high_tmp);
    vector subsurface_radius_vector_out = vector(subsurface_radius[0], subsurface_radius[1], subsurface_radius[2]);
    float subsurface_selector_out = float(thin_walled);
    color coat_attenuation_bg_tmp = color(1, 1, 1);
    color coat_attenuation_out = mix(coat_attenuation_bg_tmp, coat_color, coat);
    color emission_weight_out = emission_color * emission1;
    color coat_emission_attenuation_bg_tmp = color(1, 1, 1);
    color coat_emission_attenuation_out = mix(coat_emission_attenuation_bg_tmp, coat_color, coat);
    color opacity_luminance_out = color(0.0);
    mx_luminance_color3(opacity, color(0.272229, 0.674082, 0.0536895), opacity_luminance_out);
    vector coat_tangent_rotate_out = vector(0.0);
    mx_rotate_vector3(tangent, coat_tangent_rotate_degree_out, coat_normal, coat_tangent_rotate_out);
    color artistic_ior_ior = color(0.0);
    color artistic_ior_extinction = color(0.0);
    mx_artistic_ior(metal_reflectivity_out, metal_edgecolor_out, artistic_ior_ior, artistic_ior_extinction);
    float coat_affect_roughness_multiply2_out = coat_affect_roughness_multiply1_out * coat_roughness;
    vector tangent_rotate_out = vector(0.0);
    mx_rotate_vector3(tangent, tangent_rotate_degree_out, normal1, tangent_rotate_out);
    float coat_gamma_multiply_out = coat_clamped_out * coat_affect_color;
    vector subsurface_radius_scaled_out = subsurface_radius_vector_out * subsurface_scale;
    color emission_weight_attenuated_out = emission_weight_out * coat_emission_attenuation_out;
    vector coat_tangent_rotate_normalize_out = normalize(coat_tangent_rotate_out);
    float coat_affected_roughness_fg_tmp = 1;
    float coat_affected_roughness_out = mix(specular_roughness, coat_affected_roughness_fg_tmp, coat_affect_roughness_multiply2_out);
    vector tangent_rotate_normalize_out = normalize(tangent_rotate_out);
    float coat_gamma_in2_tmp = 1;
    float coat_gamma_out = mx_add(coat_gamma_multiply_out, coat_gamma_in2_tmp);
    vector coat_tangent_out = vector(0.0);
    if (coat_anisotropy > 0)
    {
        coat_tangent_out = coat_tangent_rotate_normalize_out;
    }
    else
    {
        coat_tangent_out = tangent;
    }
    vector2 main_roughness_out = vector2(0.0, 0.0);
    mx_roughness_anisotropy(coat_affected_roughness_out, specular_anisotropy, main_roughness_out);
    vector main_tangent_out = vector(0.0);
    if (specular_anisotropy > 0)
    {
        main_tangent_out = tangent_rotate_normalize_out;
    }
    else
    {
        main_tangent_out = tangent;
    }
    color coat_affected_subsurface_color_out = pow(subsurface_color, coat_gamma_out);
    color coat_affected_diffuse_color_out = pow(base_color, coat_gamma_out);
    BSDF coat_bsdf_out = BSDF(null_closure, color(1.0), 0.0, 0.0);
    mx_dielectric_bsdf(coat, color(1, 1, 1), coat_IOR, coat_roughness_vector_out, coat_normal, coat_tangent_out, "ggx", "R", coat_bsdf_out);
    BSDF metal_bsdf_out = BSDF(null_closure, color(1.0), 0.0, 0.0);
    mx_conductor_bsdf(1, artistic_ior_ior, artistic_ior_extinction, main_roughness_out, normal1, main_tangent_out, "ggx", metal_bsdf_out);
    BSDF specular_bsdf_out = BSDF(null_closure, color(1.0), 0.0, 0.0);
    specular_bsdf_out.ior = thin_film_IOR;
    specular_bsdf_out.thickness = thin_film_thickness;
    mx_dielectric_bsdf(specular, specular_color, specular_IOR, main_roughness_out, normal1, main_tangent_out, "ggx", "R", specular_bsdf_out);
    BSDF transmission_bsdf_out = BSDF(null_closure, color(1.0), 0.0, 0.0);
    mx_dielectric_bsdf(1, transmission_color, specular_IOR, main_roughness_out, normal1, main_tangent_out, "ggx", "T", transmission_bsdf_out);
    BSDF sheen_bsdf_out = BSDF(null_closure, color(1.0), 0.0, 0.0);
    mx_sheen_bsdf(sheen, sheen_color, sheen_roughness, normal1, sheen_bsdf_out);
    BSDF translucent_bsdf_out = BSDF(null_closure, color(1.0), 0.0, 0.0);
    mx_translucent_bsdf(1, coat_affected_subsurface_color_out, normal1, translucent_bsdf_out);
    BSDF subsurface_bsdf_out = BSDF(null_closure, color(1.0), 0.0, 0.0);
    mx_subsurface_bsdf(1, coat_affected_subsurface_color_out, subsurface_radius_scaled_out, subsurface_anisotropy, normal1, subsurface_bsdf_out);
    BSDF selected_subsurface_bsdf_out = BSDF(null_closure, color(1.0), 0.0, 0.0);
    selected_subsurface_bsdf_out.response = mix(subsurface_bsdf_out.response, translucent_bsdf_out.response, subsurface_selector_out);
    selected_subsurface_bsdf_out.throughput = mix(subsurface_bsdf_out.throughput, translucent_bsdf_out.throughput, subsurface_selector_out);
    BSDF diffuse_bsdf_out = BSDF(null_closure, color(1.0), 0.0, 0.0);
    mx_oren_nayar_diffuse_bsdf(base, coat_affected_diffuse_color_out, diffuse_roughness, normal1, diffuse_bsdf_out);
    BSDF subsurface_mix_out = BSDF(null_closure, color(1.0), 0.0, 0.0);
    subsurface_mix_out.response = mix(diffuse_bsdf_out.response, selected_subsurface_bsdf_out.response, subsurface1);
    subsurface_mix_out.throughput = mix(diffuse_bsdf_out.throughput, selected_subsurface_bsdf_out.throughput, subsurface1);
    BSDF sheen_layer_out = BSDF(null_closure, color(1.0), 0.0, 0.0);
    sheen_layer_out.response = sheen_bsdf_out.response + subsurface_mix_out.response * sheen_bsdf_out.throughput;
    sheen_layer_out.throughput = sheen_bsdf_out.throughput * subsurface_mix_out.throughput;
    BSDF transmission_mix_out = BSDF(null_closure, color(1.0), 0.0, 0.0);
    transmission_mix_out.response = mix(sheen_layer_out.response, transmission_bsdf_out.response, transmission);
    transmission_mix_out.throughput = mix(sheen_layer_out.throughput, transmission_bsdf_out.throughput, transmission);
    BSDF specular_layer_with_thin_film_out = BSDF(null_closure, color(1.0), 0.0, 0.0);
    specular_layer_with_thin_film_out.response = specular_bsdf_out.response + transmission_mix_out.response * specular_bsdf_out.throughput;
    specular_layer_with_thin_film_out.throughput = specular_bsdf_out.throughput * transmission_mix_out.throughput;
    BSDF metalness_mix_out = BSDF(null_closure, color(1.0), 0.0, 0.0);
    metalness_mix_out.response = mix(specular_layer_with_thin_film_out.response, metal_bsdf_out.response, metalness);
    metalness_mix_out.throughput = mix(specular_layer_with_thin_film_out.throughput, metal_bsdf_out.throughput, metalness);
    color metalness_mix_attenuated_out_in2_clamped = clamp(coat_attenuation_out, 0.0, 1.0);
    BSDF metalness_mix_attenuated_out = BSDF(null_closure, color(1.0), 0.0, 0.0);
    metalness_mix_attenuated_out.response = metalness_mix_out.response * metalness_mix_attenuated_out_in2_clamped;
    metalness_mix_attenuated_out.throughput = metalness_mix_out.throughput * metalness_mix_attenuated_out_in2_clamped;
    BSDF coat_layer_out = BSDF(null_closure, color(1.0), 0.0, 0.0);
    coat_layer_out.response = coat_bsdf_out.response + metalness_mix_attenuated_out.response * coat_bsdf_out.throughput;
    coat_layer_out.throughput = coat_bsdf_out.throughput * metalness_mix_attenuated_out.throughput;
    EDF emission_edf_out = emission_weight_attenuated_out * emission();
    surfaceshader shader_constructor_out = null_closure;
    mx_surface(coat_layer_out, emission_edf_out, opacity_luminance_out[0], shader_constructor_out);
    out = shader_constructor_out;
}

surface SR_gold
[[
    string mtlx_category = "standard_surface",
    string mtlx_name = "SR_gold"
]]
(
    float base = 1
    [[
        string widget = "number"
    ]],
    color base_color = color(0.944, 0.776, 0.373),
    float diffuse_roughness = 0
    [[
        string widget = "number"
    ]],
    float metalness = 1
    [[
        string widget = "number"
    ]],
    float specular = 1
    [[
        string widget = "number"
    ]],
    color specular_color = color(0.998, 0.981, 0.751),
    float specular_roughness = 0.02
    [[
        string widget = "number"
    ]],
    float specular_IOR = 1.5
    [[
        string widget = "number"
    ]],
    float specular_anisotropy = 0
    [[
        string widget = "number"
    ]],
    float specular_rotation = 0
    [[
        string widget = "number"
    ]],
    float transmission = 0
    [[
        string widget = "number"
    ]],
    color transmission_color = color(1, 1, 1),
    float transmission_depth = 0
    [[
        string widget = "number"
    ]],
    color transmission_scatter = color(0, 0, 0),
    float transmission_scatter_anisotropy = 0
    [[
        string widget = "number"
    ]],
    float transmission_dispersion = 0
    [[
        string widget = "number"
    ]],
    float transmission_extra_roughness = 0
    [[
        string widget = "number"
    ]],
    float subsurface1 = 0
    [[
        string widget = "number"
    ]],
    color subsurface_color = color(1, 1, 1),
    color subsurface_radius = color(1, 1, 1),
    float subsurface_scale = 1
    [[
        string widget = "number"
    ]],
    float subsurface_anisotropy = 0
    [[
        string widget = "number"
    ]],
    float sheen = 0
    [[
        string widget = "number"
    ]],
    color sheen_color = color(1, 1, 1),
    float sheen_roughness = 0.3
    [[
        string widget = "number"
    ]],
    float coat = 0
    [[
        string widget = "number"
    ]],
    color coat_color = color(1, 1, 1),
    float coat_roughness = 0.1
    [[
        string widget = "number"
    ]],
    float coat_anisotropy = 0
    [[
        string widget = "number"
    ]],
    float coat_rotation = 0
    [[
        string widget = "number"
    ]],
    float coat_IOR = 1.5
    [[
        string widget = "number"
    ]],
    float coat_affect_color = 0
    [[
        string widget = "number"
    ]],
    float coat_affect_roughness = 0
    [[
        string widget = "number"
    ]],
    float thin_film_thickness = 0
    [[
        string widget = "number"
    ]],
    float thin_film_IOR = 1.5
    [[
        string widget = "number"
    ]],
    float emission1 = 0
    [[
        string widget = "number"
    ]],
    color emission_color = color(1, 1, 1),
    color opacity = color(1, 1, 1),
    int thin_walled = 0
    [[
        string widget = "checkBox"
    ]],
    string geomprop_Nworld_space = "world",
    string geomprop_Tworld_space = "world",
    int geomprop_Tworld_index = 0
    [[
        string widget = "number"
    ]],
    output surfaceshader out = 0
)
{
    closure color null_closure = 0;
    vector geomprop_Nworld_out = transform(geomprop_Nworld_space, N);
    vector geomprop_Tworld_out = transform(geomprop_Tworld_space, normalize(dPdu));
    surfaceshader SR_gold_out = null_closure;
    NG_standard_surface_surfaceshader_100(base, base_color, diffuse_roughness, metalness, specular, specular_color, specular_roughness, specular_IOR, specular_anisotropy, specular_rotation, transmission, transmission_color, transmission_depth, transmission_scatter, transmission_scatter_anisotropy, transmission_dispersion, transmission_extra_roughness, subsurface1, subsurface_color, subsurface_radius, subsurface_scale, subsurface_anisotropy, sheen, sheen_color, sheen_roughness, coat, coat_color, coat_roughness, coat_anisotropy, coat_rotation, coat_IOR, geomprop_Nworld_out, coat_affect_color, coat_affect_roughness, thin_film_thickness, thin_film_IOR, emission1, emission_color, opacity, thin_walled, geomprop_Nworld_out, geomprop_Tworld_out, SR_gold_out);
    out = SR_gold_out;
}

